#!/usr/bin/perl
#
# This file is part of sp-endurance.
#
# vim: ts=4:sw=4:et
#
# Copyright (C) 2010-2012 by Nokia Corporation
#
# Contact: Eero Tamminen <eero.tamminen@nokia.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA

use v5.10;
use strict;
use FindBin;

use lib "$FindBin::Bin/../postproc-lib/lib";

use SP::Endurance::Parser qw/parse_dir/;
use SP::Endurance::Plotter;
use SP::Endurance::GraphGenerators qw/graph_generators get_plots/;
use SP::Endurance::Util qw/GRAPHS_DIR plot_filename plot_thumbname uptimes
        total_duration sw_versions hw_string xtics dur_to_str round_durations/;
use SP::Endurance::GnuplotWorker;

use List::Util qw/min max/;
use Getopt::Long;
use File::Basename qw/basename/;
use Data::Dumper;
use IO::Pipe;
use JSON qw/encode_json/;

sub THUMB_WIDTH()  { 320 }
sub THUMB_HEIGHT() { 250 }
sub HTML_NAME()    { 'index.html' }
sub JSON_NAME()    { 'index.json' }

my $gnuplot_terminal = 'pngcairo';

my $flag_h;
my $flag_terminal;
my $flag_j;
my $flag_v;

# The -e flag is intentionally undocumented. When specified, the 'e' directory
# is not cleared after running the script.
my $flag_e;

# Paranoid, yes, but I will never want to abort the script trying to figure out
# our script name.
my $progname;
eval { $progname = basename $0; };
$progname = $0 unless defined $progname;

sub img {
    my $plot = shift;

    my $graph = plot_filename $plot->{key};
    my $thumb = plot_thumbname $plot->{key};

<<END;
<table class="image">
  <caption align="bottom">$plot->{legend}</caption>
  <tr>
    <td><a href="$graph"><img src="$thumb"></a></td>
  </tr>
</table>
END
}

sub html_title {
    my $masterdb = shift;

    my $sw_version = join ' / ', sw_versions $masterdb;
    my $hardware     = hw_string $masterdb;

    $sw_version = " [$sw_version]" if length $sw_version;
    $hardware   = " [$hardware]"   if length $hardware;

    "Endurance Graphs${sw_version}${hardware}"
}

sub process_plots { grep { $_->{key} =~ /^1/ and $_->cmd } get_plots }
sub system_plots  { grep { $_->{key} !~ /^1/ and $_->cmd } get_plots }

sub generate_html {
    my $masterdb = shift;
    my $filename = shift;

    my $fh;
    unless (open $fh, '>', $filename) {
        say STDERR "ERROR: unable to open '$filename' for writing: $!";
        exit 1;
    }

    my $sw_version = join ' / ', sw_versions $masterdb;

    print $fh <<END;
<!DOCTYPE html>
<html>
<head>
 <meta charset="UTF-8">
 <style type="text/css">
  table { float: left; margin: 20px 5px 0px 0; }
 </style>
 <title>${\html_title $masterdb}</title>
</head>
<body>

<h1>ENDURANCE GRAPHS</h1>
<ul>
  <li>Total duration: <b>${\dur_to_str(total_duration $masterdb)}</b>.
      Snapshot interval average: <b>${\round_durations($masterdb)->{avg}}</b> |
                        longest: <b>${\round_durations($masterdb)->{max}}</b> |
                       shortest: <b>${\round_durations($masterdb)->{min}}</b></li>
  <li>OS version: <b>$sw_version</b>. Hardware: <b>${\hw_string $masterdb}</b>.</li>
  <li>Content:
    <a href='#process_graphs'>Process Resource Usage Graphs</a> |
    <a href='#system_graphs'>System Resource Usage Graphs</a> |
    <a href='#steps'>Snapshot Dates and Descriptions</a>.
    See also: <a href='endurance-report.html'>endurance-report.html</a>.</li>
</ul>
END

    print $fh <<END;
<a name='process_graphs'></a>
<h2>PROCESS RESOURCE USAGE GRAPHS</h2>
END
    foreach (process_plots) { print $fh img $_ }

    print $fh <<END;
<br clear='all'>
<a name='system_graphs'></a>
<h2>SYSTEM RESOURCE USAGE GRAPHS</h2>
END
    foreach (system_plots) { print $fh img $_ }

    print $fh <<END;
<br clear='all'>
<a name='steps'></a>
<h2>SNAPSHOT DATES AND DESCRIPTIONS</h2>
END
    foreach my $entry (@$masterdb) {
        my $step;
        $step = ' ' . join(' ', @{$entry->{step}}) if exists $entry->{step};
        say $fh $entry->{dirname} . ': [' . $entry->{date} . ']' . $step . '<br>';
    }

    print $fh <<END;
</body>
</html>
END

    close $fh;
}

sub generate_json {
    my $masterdb = shift;
    my $filename = shift;

    my $fh;
    unless (open $fh, '>', $filename) {
        say STDERR "ERROR: unable to open '$filename' for writing: $!";
        exit 1;
    }

    my %json;

    foreach my $plot (process_plots) {
        $json{process_graphs}->{$plot->{key}} = $plot->json;
        $json{process_graphs}->{$plot->{key}}->{filename}
            = plot_filename $plot->{key};
        $json{process_graphs}->{$plot->{key}}->{thumbname}
            = plot_thumbname $plot->{key};
    }

    foreach my $plot (system_plots) {
        $json{system_graphs}->{$plot->{key}} = $plot->json;
        $json{system_graphs}->{$plot->{key}}->{filename}
            = plot_filename $plot->{key};
        $json{system_graphs}->{$plot->{key}}->{thumbname}
            = plot_thumbname $plot->{key};
    }

    $json{metadata}->{steps} = [map {
        exists $_->{step} ? join(' ', @{$_->{step}}) : undef
    } @$masterdb];

    $json{metadata}->{dates} = [map {
        exists $_->{date} ? $_->{date} : undef
    } @$masterdb];

    $json{metadata}->{dirnames} = [map {
        exists $_->{dirname} ? $_->{dirname} : undef
    } @$masterdb];

    $json{metadata}->{duration} = dur_to_str(total_duration $masterdb);

    #print STDERR Dumper \%json;
    say $fh encode_json \%json;
}

sub generate_plots {
    my $masterdb = shift;

    my $plot_width = @$masterdb * 13 + 200;
    $plot_width = max $plot_width, 1000;
    $plot_width = min $plot_width, 1900;

    #say "- plot_width: $plot_width";

    my $terminal;
    if ($gnuplot_terminal eq 'pngcairo') {
        $terminal = qq/pngcairo size $plot_width, 1000 font "serif,8"/;
    } else {
        $terminal = qq/png small truecolor size $plot_width, 1000/;
    }

    my $sw_version = join ' / ', sw_versions $masterdb;
    my $global_label =
        'SW=' . $sw_version . '\n' .
        'HW=' . hw_string($masterdb);

    my $plotter = SP::Endurance::Plotter->new(
        rounds => scalar @{$masterdb},
        terminal => $terminal,
        global_label => $global_label,
        xtics => xtics($plot_width, $masterdb),
    );

    foreach (graph_generators) {
        eval {
            $_->($plotter, $masterdb);
        };
        if ($@) {
            use B qw/svref_2object/;
            my $name = svref_2object($_)->GV->NAME;
            print STDERR "WARNING: graph generator '$name()' failed: $@";
        }
    }
}

sub sanity_checks {
    my $masterdb = shift;

    unless (@$masterdb >= 2) {
        say STDERR 'ERROR: unable to continue without at least two valid data directories.';
        exit 1;
    }

    foreach my $i (1 .. @$masterdb-1) {
        if ($masterdb->[$i  ]->{'/proc/uptime'}->{uptime} <=
            $masterdb->[$i-1]->{'/proc/uptime'}->{uptime}) {
            say STDERR "** NOTE: uptime steps back at snapshot '"
                . $masterdb->[$i]->{dirname}
                .  "'. This usally indicates a reboot.";
        }
    }
}

sub db_size {
    my $masterdb = shift;

    return unless $flag_v;

    eval {
        require Devel::Size;
        my $dbsize = Devel::Size::total_size($masterdb) / 1024**2;
        say '- total size of @masterdb: ' . sprintf("%0.2f", $dbsize) . ' MB';

        return unless $flag_v >= 2;

        foreach my $entry (@$masterdb) {
            my $entry_size = Devel::Size::total_size($entry) / 1024**2;
            say "  - $entry->{dirname}: " . sprintf("%.2f", $entry_size) . ' MB';

            if ($flag_v >= 3) {
                my %sizes;
                foreach (keys %{$entry}) {
                    $sizes{$_} = Devel::Size::total_size($entry->{$_});
                }
                my $cnt = 0;
                foreach (sort { $sizes{$b} <=> $sizes{$a} } keys %{$entry}) {
                    say "    - $_: " . sprintf("%.3f", $sizes{$_} / 1024**2) . ' MB';
                    last if $cnt++ >= 5;
                }
            }
        }
    };
}

sub usage {
    say STDERR <<END;
Usage: $progname [OPTS] <DIR> <DIR> [<DIR>...]

$progname generates variety of process and system level graphs
based on the endurance data. The graphs may be used for discovering
issues in applications and in the system.

$progname creates '${\HTML_NAME}' suitable for viewing in a web browser.
Graph data and metadata is written in JSON format to file '${\JSON_NAME}'.

Options:
   --gnuplot-terminal=pngcairo    Use gnuplot terminal 'pngcairo'.
                                  This is the default.
   --gnuplot-terminal=png         Use gnuplot terminal 'png'.
   -j N                           Run N copies of gnuplot and thumbnail
                                  generators in parallel. The Perl
                                  Parallel::ForkManager module must be
                                  available for this feature to work.
   -v                             Add verboseness. Apply several times
                                  for full effect.

Examples:

   # Create graphs including directories 000, 001 and 002:
   $progname 000 001 002

   # Create graphs including all directories (000, ..., 999):
   $progname ???

   # Create graphs including every other directory (000, 002, 004, ...):
   $progname ??[02468]
END

    exit 1;
}

exit 1 unless GetOptions(
    'h'                     => \$flag_h,
    'help'                  => \$flag_h,
    'gnuplot-terminal=s'    => \$flag_terminal,
    'j=i'                   => \$flag_j,
    'e'                     => \$flag_e,
    'v'                     => sub { $flag_v++ },
);

usage if $flag_h or @ARGV < 2;

if ($flag_terminal) {
    if ($flag_terminal eq 'pngcairo') {
        $gnuplot_terminal = 'pngcairo';
    } elsif ($flag_terminal eq 'png') {
        $gnuplot_terminal = 'png';
    } else {
        say STDERR "ERROR: terminal type '$flag_terminal' not supported. Try png or pngcairo.";
        exit 1;
    }
} else {
    # pngcairo segfaults in Harmattan ARMv7 scratchbox target due to
    # /proc/pid/auxv emulation limitation. Switch to png terminal to avoid it.
    if (-e "/targets/links/scratchbox.config") {
        $gnuplot_terminal = 'png';
    }
}

my $worker_pipe = IO::Pipe->new();
my $pid = fork;
die "fork() failed: $!" unless defined $pid;

if ($pid == 0) {
    $worker_pipe->reader;
    my $ret = SP::Endurance::GnuplotWorker::worker($worker_pipe, {
        flag_j       => $flag_j,
        thumb_width  => THUMB_WIDTH,
        thumb_height => THUMB_HEIGHT,
    });
    exit $ret;
}

$worker_pipe->writer;

$SP::Endurance::GraphGenerators::done_plotting_cb = sub {
    my $plot = shift;

    my $gnuplot_input = $plot->cmd;
    my $key = $plot->{key};
    my $cmdfile = "e/$key.cmd";

    if (defined $gnuplot_input and length $gnuplot_input) {
        open my $cmd_fh, '>', $cmdfile or die "Unable to open '$cmdfile' for writing: $!";
        print $cmd_fh $gnuplot_input;
        close $cmd_fh;

        say $worker_pipe $key;
        $worker_pipe->flush;
    }
};

my @masterdb;

say $progname;
print '- reading input: ';
foreach my $i (0 .. @ARGV-1) {
    my $dir = $ARGV[$i];
    print $dir . ' ';

    eval {
        die "invalid endurance directory, '$dir/usage.csv' missing" unless -e "$dir/usage.csv";
        my $entry = parse_dir($dir);
        die "parsing failed" unless defined $entry and ref $entry eq 'HASH';
        push @masterdb, $entry;
    };

    if ($@) {
        print STDERR "\nWARNING: failed to parse directory '$dir': $@";
    }
}
say;

# Here's a nice way to debug the parsed data structures.
# (Note that there can be some binary in the output due to use of pack().)
#$Data::Dumper::Indent = 1;
#print Dumper \@masterdb;

db_size \@masterdb;
sanity_checks \@masterdb;

say " - rounds: " . scalar @masterdb;
say "   - first round date: $masterdb[0]->{date}"
    if exists $masterdb[0]->{date} and defined $masterdb[0]->{date};
say "   - last round date:  $masterdb[-1]->{date}"
    if exists $masterdb[-1]->{date} and defined $masterdb[-1]->{date};
say ' - total duration: ' . dur_to_str(total_duration \@masterdb);
say "   - average  snapshot interval: ", round_durations(\@masterdb)->{avg};
say "   - longest  snapshot interval: ", round_durations(\@masterdb)->{max};
say "   - shortest snapshot interval: ", round_durations(\@masterdb)->{min};

unlink glob 'e/*.cmd';
unlink glob GRAPHS_DIR . '/1???_*';
unlink glob GRAPHS_DIR . '/2???_*';
unlink HTML_NAME;
unlink JSON_NAME;

mkdir 'e';
if (not -d 'e') {
    say STDERR "ERROR: unable to create directory 'e': $!";
    exit 1;
}

mkdir GRAPHS_DIR;
if (not -d GRAPHS_DIR) {
    say STDERR qq/ERROR: unable to create directory '${\GRAPHS_DIR}': $!/;
    exit 1;
}

say "generating graph input for gnuplot...";
generate_plots \@masterdb;

close $worker_pipe;

say q/generating '/ . HTML_NAME . qq/'.../;
generate_html \@masterdb, HTML_NAME;

say q/generating '/ . JSON_NAME . qq/'.../;
generate_json \@masterdb, JSON_NAME;

say "Main process now waiting for child PID '$pid' to finish." if $flag_v;
waitpid $pid, 0;

if (not -e 'endurance-report.html') {
    say STDERR "NOTE: generate also the endurance report (with endurance-report),"
             . " and save it in current directory as 'endurance-report.html'.";
}

if (not $flag_e) {
    unlink glob 'e/*.cmd';
    rmdir 'e';
}

say "$progname done.";
